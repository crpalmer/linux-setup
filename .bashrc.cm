# Aliases / scripts for CM work

CM_SRC=~/cm-11.0

alias sync-cm='( cd $CM_SRC && repo sync 2>&1 | tee /tmp/sync.txt ; cp /tmp/sync.txt ~/syncs-cm-11.0/`date +%Y%m%dT%H%M%S` )'

build-cm() {
(
  export OUT_DIR_COMMON_BASE=/out/$1/ && \
  echo $OUT_DIR_COMMON_BASE && \
  cd $CM_SRC && \
  . ./build/envsetup.sh && \
  brunch $1 && \
  mkdir -p /mnt/roms/$1 && \
  cp $OUT_DIR_COMMON_BASE/*/target/product/$1/*-UNOFFICIAL*-$1.zip /mnt/roms/$1
) 2>&1 | tee /tmp/build-$1.txt
}

release-cm() {
  export OUT_DIR_COMMON_BASE=/out/$1/ && \
  scp `ls -t $OUT_DIR_COMMON_BASE/*/target/product/$1/*-UNOFFICIAL-$1.zip | head -1` download.crpalmer.org:/downloads/$1/
}

build-cm-boot() {
(
  export OUT_DIR_COMMON_BASE=/out/$1 && \
  echo $OUT_DIR_COMMON_BASE && \
  cd $CM_SRC && \
  . ./build/envsetup.sh && \
  breakfast $1 && \
  mka bootimage && \
  boot-odin $1
) 2>&1 | tee /tmp/build-$1.txt
}

clean-cm() {
(
  export OUT_DIR_COMMON_BASE=/out/$1 && \
  cd $CM_SRC && \
  . ./build/envsetup.sh && \
  make clean
)
}

boot-odin() {
(
  cd /mnt/roms/odin && \
  create-odin cm-boot-$1 /out/$1/*/target/product/$1/boot.img
)
}

gdb-cm() {
  export OUT_DIR_COMMON_BASE=/out/$1 && \
  . ./build/envsetup.sh && \
  breakfast $1 && \
  gdbclient
}

# -------------------------

alias build-mondrianwifi='build-cm mondrianwifi'
alias build-mondrianlte='build-cm mondrianlte'
alias build-mondrianwifi-boot='build-cm-boot mondrianwifi'
alias build-mondrianlte-boot='build-cm-boot mondrianlte'
alias mondrianwifi-boot-odin='boot-odin mondrianwifi'
alias mondrianlte-boot-odin='boot-odin mondrianlte'
alias release-mondrianlte='release-cm mondrianlte'

alias build-picassolte='build-cm picassolte'
alias build-picassolte-boot='build-cm-boot picassolte'
alias picassolte-boot-odin='boot-odin picassolte'
alias release-picassolte='release-cm picassolte'

alias build-picassowifi='build-cm picassowifi'
alias build-picassowifi-boot='build-cm-boot picassowifi'
alias picassowifi-boot-odin='boot-odin picassowifi'
alias release-picassowifi='release-cm picassowifi'

alias build-dlx='build-cm dlx'
alias build-dlx-boot='build-cm-boot dlx'
alias release-dlx='release-cm dlx'

alias build-hh='build-cm hammerhead'
alias build-hh-boot='build-cm-boot hammerhead'
alias release-hh='release-cm hammerhead'
alias build-hammerhead='build-cm hammerhead'
alias build-hammerhead-boot='build-cm-boot hammerhead'
alias release-hammerhead='release-cm hammerhead'

alias gdb-mondrianwifi="gdb-cm mondrianwifi"

alias mondrianwifi-recovery-odin='( cd /mnt/roms/odin && create-odin cm-recovery-mondrianwifi /out/mondrianwifi/*/target/product/mondrianwifi/recovery.img )'

alias picassolte-recovery-odin='( cd /mnt/roms/odin && create-odin cm-recovery-picassolte /out/picassolte/*/target/product/picassolte/recovery.img )'

alias picassowifi-recovery-odin='( cd /mnt/roms/odin && create-odin cm-recovery-picassowifi /out/picassowifi/*/target/product/picassowifi/recovery.img )'

# -------------------------

cm-status() {
(
    cd ~/cm-11.0
    for f in `repo status | sed "s/^project //p;d" | sed "s/ .*//"`
    do
        (
             echo
             echo "******* $f *****"
             echo
             cd $f
             git status
             log github/cm-11.0..
        )
   done
)
}

# ------------------------

flash-boot() {
   boot=/out/$1/*/target/product/$1/boot.img
   if [ ! -r $boot ]; then
	echo >&2 "error: Must specify build target and build it.  Failed to access:\n\t$boot"
	exit 1
   fi
   dev=dw_mmc.0
   if [ "$2" != "" ]; then
	dev="$2"
   else
	dev="/dev/block/platform/dw_mmc.0/by-name/BOOT"
   fi
   adb push $boot /sdcard/boot.img
   adb shell su -c "dd if=/sdcard/boot.img of=$dev"
}

alias flash-boot-dlx='flash-boot dlx'
alias flash-boot-hammerhead='flash-boot hammerhead'
alias flash-boot-mondrianwifi='flash-boot mondrianwifi /dev/block/platform/msm_sdcc.1/by-name/boot'
alias flash-boot-picassolte='flash-boot picassolte'
alias flash-boot-picassowifi='flash-boot picassowifi'

# ------------------------

flash-recovery() {
   recovery=/out/$1/*/target/product/$1/recovery.img
   if [ ! -r $recovery ]; then
	echo >&2 "error: Must specify build target and build it.  Failed to access:\n\t$recovery"
	exit 1
   fi
   if [ "$2" != "" ]; then
	dev="$2"
   else
	dev="/dev/block/platform/dw_mmc.0/by-name/RECOVERY"
   fi
   adb push $recovery /sdcard/recovery.img
   adb shell su -c "dd if=/sdcard/recovery.img of=$dev"
}

alias flash-recovery-dlx='flash-recovery dlx'
alias flash-recovery-hammerhead='flash-recovery hammerhead'
alias flash-recovery-mondrianwifi='flash-recovery mondrianwifi /dev/block/platform/msm_sdcc.1/by-name/recovery'
alias flash-recovery-picassolte='flash-recovery picassolte'
alias flash-recovery-picassowifi='flash-recovery picassowifi'

# -----------------------------

tis-delta() {
    date
    adb shell su -c "cat $1" | dos2unix > /tmp/tis
    join -j 1 -t ' ' /tmp/tis.last /tmp/tis | \
	awk '{ if ($3 != $2) printf("%d %d\n", $1, $3 - $2); }'
    cp /tmp/tis /tmp/tis.last
}

alias tis-delta-mali="tis-delta /sys/devices/platform/mali.0/time_in_state"
alias tis-delta-cpu0="tis-delta /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state"
alias tis-delta-cpu1="tis-delta /sys/devices/system/cpu/cpu1/cpufreq/stats/time_in_state"
alias tis-delta-cpu2="tis-delta /sys/devices/system/cpu/cpu2/cpufreq/stats/time_in_state"
alias tis-delta-cpu3="tis-delta /sys/devices/system/cpu/cpu3/cpufreq/stats/time_in_state"
