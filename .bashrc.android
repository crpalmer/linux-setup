# Aliases / scripts for LineageOS work

export PATH="~/android-sdk-linux/build-tools/23.0.2:~/android-sdk-linux/platform-tools:$PATH"
export WITH_SU=true

alias start-lineage-13.0="export LINEAGE_WHICH=lineage-13.0 LINEAGE_SRC=~/lineage-13.0 && export C=~/lineage-13.0 && cd ~/lineage-13.0"
alias start-lineage-14.1="export LINEAGE_WHICH=lineage-14.1 LINEAGE_SRC=~/lineage-14.1 && export C=~/lineage-14.1 && cd ~/lineage-14.1"
alias start-omni-7.1='export LINEAGE_WHICH=omni-7.1 LINEAGE_SRC=/data/omni-7.1 && export C=$LINEAGE_SRC && cd $C'

# Muscle memory requires these
alias start-cm-13.0=start-lineage-13.0
alias start-cm-14.1=start-lineage-14.1
alias build-cm=build-lineage
alias cm-status=lineage-status
alias sync-cm=sync-lineage

alias build-lineage-all='build-lineage-unsigned ether ; build-lineage-unsigned pme ; build-lineage-unsigned kiwi; build-lineage-unsigned victara ; build-lineage-unsigned mondrianwifi'

alias build-recovery='(cd $C && mka recoveryimage)'

if [ -x "/usr/bin/make-3.81" ]; then
   export LINEAGE_MAKE=/usr/bin/make-3.81
else
   export LINEAGE_MAKE=make
fi

make_j_arg() {
  ncores=`cat /proc/cpuinfo  | grep 'processor[[:space:]]*:' | wc -l`
  echo "-j`expr $ncores '*' 2`"
}

export MAKEFLAGS="`make_j_arg`"

sync-lineage() {
(
  cd $LINEAGE_SRC &&
  (
    echo "---- FETCHING -----" &&
    repo sync -n $* &&
    echo "----- SYNCING SOURCE ------" &&
    repo sync -l $*
  )2>&1 | tee /tmp/sync.txt
  cp /tmp/sync.txt ~/syncs-$LINEAGE_WHICH/`date +%Y%m%dT%H%M%S`
)
}

run_make() {
(
  cd $C
  if [ -d /lineage-tmp/ ]; then
    export TMPDIR=/lineage-tmp
  fi
  export MAKE="$LINEAGE_MAKE"
  export CCACHE_BASEDIR="$OUT"
  time $LINEAGE_MAKE `make_j_arg` $*
)
}

run-build() {
(
  set -e
  S=$OUT/signing
  CERTS=~/.android-certs
  ZIP=$OUT/$LINEAGE_WHICH-`date +%Y%m%d`-crpalmer-$LINEAGE_DEVICE.zip
  run_make target-files-package dist
  mkdir -p $OUT/signing
  cd $S
  ( ln -s $OUT_DIR_COMMON_BASE/$LINEAGE_WHICH out ; ln -s $C/vendor ; true)
  $C/build/tools/releasetools/sign_target_files_apks \
    -o \
    -d $CERTS \
    $DIST/*-target_files-*.zip \
    $S/signed-target_files.zip
  $C/build/tools/releasetools/ota_from_target_files \
    -k $CERTS/releasekey \
    --block --backup=true \
    $S/signed-target_files.zip \
    unsigned.zip
  sign_zip.py -k $CERTS/platform unsigned.zip $ZIP
  cp $ZIP /mnt/roms/$LINEAGE_DEVICE
)
}

build-lineage-signed() {
(
  start-lineage $1 && \
  cd $LINEAGE_SRC && \
  rm -rf $DIST/*-target_files-*.zip || true && \
  time run-build 2>&1 | tee /tmp/build-$1.txt
)
}

build-lineage-unsigned() {
(
  set -e

  start-lineage $1
  run_make bacon
  if [ -e /mnt/roms ]; then
    mkdir -p /mnt/roms/$1
    cp $OUT_DIR_COMMON_BASE/$LINEAGE_WHICH/target/product/$1/*-UNOFFICIAL*-$1.zip /mnt/roms/$1
  fi
) 2>&1 | tee /tmp/build-$1.txt
}

alias build-lineage=build-lineage-unsigned

start-cts() {
  export -n ANDROID_BUILD_TOP
}

clean-cts() {
  adb root
  adb shell rm "/sdcard/cts*"
  adb shell rm -rf \
	"/sdcard/temp* /sdcard/tmp* /sdcard/*.dng /sdcard/*.ivf /sdcard/*.egp" \
	"/sdcard/test?* /sdcard/record.out /sdcard/verifyJpegKeys.jpeg" \
	"/sdcard/dynamic-config-files/ /sdcard/record.* /sdcard/football_out.yuv" \
	"/sdcard/media* /sdcard/netsecpolicy.bin /sdcard/TestLog.qpa" \
	"/sdcard/SurfaceViewSyncTests/ /sdcard/UiRenderingCaptures/ /sdcard/MUST_*" \
	"/sdcard/sensorTests/ /sdcard/PlaybackTestResult.txt" \
	"/sdcard/OpenLabsLibrary/ /sdcard/dEQP-TestCaseList.txt" \
	"/sdcard/device-info-files/ /sdcard/report-log-files/"

}

start-common() {
  export OUT_DIR_COMMON_BASE=/out/$1
  cd $LINEAGE_SRC
  if [ `hostname` = compile -o `hostname` = ab1  -o `hostname` = ab ]; then
     . ./build/envsetup.sh
     breakfast $1 || true
  fi

  export OUT="$OUT_DIR_COMMON_BASE/$LINEAGE_WHICH/target/product/$1"
  export CTS="$OUT_DIR_COMMON_BASE/$LINEAGE_WHICH/host/linux-x86/cts"
  export DIST="$OUT_DIR_COMMON_BASE/$LINEAGE_WHICH/dist"
  export LINEAGE_DEVICE="$1"
  export STOCK=""

  export DD=""
  export VV=""

  case "$1" in
  dlx)
    export ANDROID_SERIAL=FA2BLS506023
    export D=$LINEAGE_SRC/device/htc/$1
    export V=$LINEAGE_SRC/vendor/htc/$1
    export K=$LINEAGE_SRC/kernel/htc/m7
    ;;
  Z008)
    export ANDROID_SERIAL=F9AZFGTW0010
    export D=$LINEAGE_SRC/device/asus/$1
    export DD=$LINEAGE_SRC/device/asus/mofd-common
    export V=$LINEAGE_SRC/vendor/asus/$1
    export VV=$LINEAGE_SRC/vendor/asus/mofd-common
    export K=$LINEAGE_SRC/kernel/asus/moorefield
    export STOCK=/data/zenfone2/firmware/current-z008
    ;;
  Z00A)
    export ANDROID_SERIAL=F5AZFG10C192
    export D=$LINEAGE_SRC/device/asus/$1
    export DD=$LINEAGE_SRC/device/asus/mofd-common
    export V=$LINEAGE_SRC/vendor/asus/$1
    export VV=$LINEAGE_SRC/vendor/asus/mofd-common
    export K=$LINEAGE_SRC/kernel/asus/moorefield
    export STOCK=/data/zenfone2/firmware/current
    ;;
  ether)
    export ANDROID_SERIAL=NBQGLMB651603894
    export D=$LINEAGE_SRC/device/nextbit/$1
    export V=$LINEAGE_SRC/vendor/nextbit/$1
    export K=$LINEAGE_SRC/kernel/nextbit/msm8992
    export STOCK=/data/$1/firmware/current/
    ;;
  fugu)
    export ANDROID_SERIAL=FF18D69C
    export D=$LINEAGE_SRC/device/asus/$1
    export V=$LINEAGE_SRC/vendor/asus/$1
    export K=$LINEAGE_SRC/kernel/asus/fugu
    ;;
  kiwi)
    export ANDROID_SERIAL=GFMDU16109001917
    export D=$LINEAGE_SRC/device/huawei/$1
    export V=$LINEAGE_SRC/vendor/huawei/$1
    export K=$LINEAGE_SRC/kernel/huawei/$1
    export STOCK=/data/kiwi/firmware/current
    ;;
  hammerhead|hammerheadcaf)
    export ANDROID_SERIAL=03a3e4ad437cbd9b
    export D=$LINEAGE_SRC/device/lge/$1
    export V=$LINEAGE_SRC/vendor/lge/$1
    export K=$LINEAGE_SRC/kernel/lge/hammerhead
    ;;
  mondrianwifi)
    export ANDROID_SERIAL=1019440c06792b29
    export D=$LINEAGE_SRC/device/samsung/$1
    export V=$LINEAGE_SRC/vendor/samsung/$1
    export K=$LINEAGE_SRC/kernel/samsung/mondrianwifi
    export STOCK=/data/mondrianwifi/t320ueu1anai/
    ;;
  mondrianlte)
    export ANDROID_SERIAL=1019440c06792b29
    export D=$LINEAGE_SRC/device/samsung/$1
    export DD=$LINEAGE_SRC/device/samsung/tabpro-common
    export V=$LINEAGE_SRC/vendor/samsung/$1
    export VV=$LINEAGE_SRC/vendor/samsung/tabpro-common
    export K=$LINEAGE_SRC/kernel/samsung/mondrianwifi
    ;;
  picassolte)
    export ANDROID_SERIAL=1ed18fed
    export D=$LINEAGE_SRC/device/samsung/$1
    export DD=$LINEAGE_SRC/device/samsung/tabpro-common
    export V=$LINEAGE_SRC/vendor/samsung/$1
    export VV=$LINEAGE_SRC/vendor/samsung/tabpro-common
    export K=$LINEAGE_SRC/kernel/samsung/mondrianwifi
    ;;
  picassowifi)
    export ANDROID_SERIAL=32044d1a104eb0db
    export D=$LINEAGE_SRC/device/samsung/$1
    export V=$LINEAGE_SRC/vendor/samsung/$1
    export K=$LINEAGE_SRC/kernel/samsung/exynos5420
    export STOCK=/data/exynos/T520UANF4/
    ;;
  pme)
    export ANDROID_SERIAL=HT66RBN00029
    export D=$LINEAGE_SRC/device/htc/$1
    export V=$LINEAGE_SRC/vendor/htc/$1
    export K=$LINEAGE_SRC/kernel/htc/msm8996
    export STOCK=/data/$1/firmware/current/
    ;;
  tetra|tetratwrp)
    export ANDROID_SERIAL=14442D48F8902AE
    export D=$LINEAGE_SRC/device/sony/$1
    export V=$LINEAGE_SRC/vendor/sony/$1
    export K=$LINEAGE_SRC/kernel/sony/tetra
    ;;
  victara)
    #export ANDROID_SERIAL=TA98903O0Y
    export ANDROID_SERIAL=TA9890CWCF
    export D=$LINEAGE_SRC/device/motorola/$1
    export V=$LINEAGE_SRC/vendor/motorola/$1
    export K=$LINEAGE_SRC/kernel/motorola/msm8974
    export STOCK=/data/victara/firmware/6.0
    ;;
  *)
    echo "*** Current using device: $ANDROID_SERIAL"
    ;;
  esac

  if [ "$DD" = "" ]; then
    export DD="$D"
  fi

  if [ "$VV" = "" ]; then
    export VV="$V"
  fi

  LINEAGE_DEVICE=$1

  tmp=`echo $PATH | tr ':' '\n' | egrep -v /home/crpalmer/android-sdk-linux | tr '\n' ':'`
  export PATH="/home/crpalmer/android-sdk-linux/platform-tools:$tmp"

  echo "Environment configured for $LINEAGE_WHICH $LINEAGE_DEVICE"

  return 0
}

start-omni() {
  if [ "$BASE_PS1" = "" ]; then
     export BASE_PS1="$PS1"
  fi
  export PS1="[OMNI $1] $BASE_PS1"

  start-common $1
}

start-lineage() {
  if [ "$2" == "12.0" ]; then
     start-lineage-12.0
  elif [ "$2" = "12.1" ]; then
     start-lineage-12.1
  elif [ "$2" = "13.0" ]; then
     start-lineage-13.0
  elif [ "$2" != "" ]; then
     echo >&2 'Invalid argument [$2]'
  elif [ "$LINEAGE_SRC" = "" ]; then
     start-lineage-14.1
  fi

  if [ "$BASE_PS1" = "" ]; then
     export BASE_PS1="$PS1"
  fi
  export PS1="[$1] $BASE_PS1"

  start-common $1
}

alias start-dlx='start-lineage-13.0 && start-lineage dlx "$@"'
alias start-Z008='start-lineage-13.0 && start-lineage Z008 "$@"'
alias start-Z00A13='start-lineage-13.0 && start-lineage Z00A "$@"'
alias start-Z00A='start-lineage-14.1 && start-lineage Z00A "$@"'
alias start-kiwi13='start-lineage-13.0 && start-lineage kiwi "$@"'
alias start-kiwi='start-lineage-14.1 && start-lineage kiwi "$@"'
alias start-mondrianwifi13='start-lineage-13.0 && start-lineage mondrianwifi "$@"'
alias start-mondrianwifi='start-lineage-14.1 && start-lineage mondrianwifi "$@"'
alias start-picassolte='start-lineage-13.0 && start-lineage picassolte "$@"'
alias start-picassowifi='start-lineage-13.0 && start-lineage picassowifi "$@"'
alias start-pme13='start-lineage-13.0 && start-lineage pme "$@"'
alias start-pme='start-lineage-14.1 && start-lineage pme "$@"'
alias start-victara13='start-lineage-13.0 && start-lineage victara "$@"'
alias start-victara='start-lineage-14.1 && start-lineage victara "$@"'
alias start-ether='start-lineage-14.1 && start-lineage ether "$@"'

alias start-twrp-ether='start-omni-7.1 && start-omni ether'
alias start-twrp-kiwi='start-omni-7.1 && start-omni kiwi'
alias start-twrp-pme='start-omni-7.1 && start-omni pme'
alias start-twrp-victara='start-omni-7.1 && start-omni victara'

adb-forward() {
  for i in 5039 5040 5041 5042 5043 5044 5045 5046 5047 5048
  do
    adb forward tcp:$i tcp:$i
  done
}

logcat() {
   adb logcat -v time "$@" | tee /tmp/lc.$LINEAGE_DEVICE
}

logcat-radio() {
   adb logcat -b radio -v time "$@" | tee /tmp/lc.$LINEAGE_DEVICE.radio
}

lineage-dmesg() {
   adb wait-for-device
   while true
   do
      adb shell 'su -c "dmesg -c"'
      sleep 1
   done | tee /tmp/dm.$LINEAGE_DEVICE
}

release-lineage() {
  export OUT_DIR_COMMON_BASE=/out/$1 && \
  scp `ls -t $OUT_DIR_COMMON_BASE/$LINEAGE_WHICH/target/product/$1/*-UNOFFICIAL-$1.zip | head -1` download.crpalmer.org:/downloads/$1/
}

release-nightly() {
  export OUT_DIR_COMMON_BASE=/out/$1

  F=`ls -t $OUT_DIR_COMMON_BASE/$LINEAGE_WHICH/target/product/$1/*-UNOFFICIAL-$1.zip | head -1`
  D=/nightlies/$1-$LINEAGE_WHICH
  TMP=$D/.upload
  FINAL=$D/`basename $F`

  if [ "`ssh download.crpalmer.org ls -d $D`" = "" ]; then
    D=/nightlies/$1
    ssh download.crpalmer.org mkdir -p $D
  fi

  echo "Releasing $F"
  echo "To        $FINAL"
  echo "Via       $TMP"

  for try in 1 2 3; do
    scp $F download.crpalmer.org:$TMP

    local_md5=`md5sum $F | cut -d ' ' -f 1`
    remote_md5=`ssh download.crpalmer.org md5sum $TMP | cut -d ' ' -f 1`

    if [ "$local_md5" = "$remote_md5" ]; then
      echo "MD5s match, releasing it"
      ssh download.crpalmer.org mv $TMP $FINAL
      break
    else
      echo "MD5 mismatch, upload aborted on try $try / 3"
      echo "Local MD5: $local_md5"
      echo "Remote MD5: $remote_md5"
    fi
  done
}

build-lineage-boot() {
(
  export OUT_DIR_COMMON_BASE=/out/$1 && \
  echo $OUT_DIR_COMMON_BASE && \
  cd $LINEAGE_SRC && \
  . ./build/envsetup.sh && \
  breakfast $1 && \
  run_make bootimage && \
  boot-odin $1
) 2>&1 | tee /tmp/build-$1.txt
}

build-lineage-boot-odin() {
  build-lineage-boot $1 && \
  boot-odin $1
}

clean-lineage() {
(
  export OUT_DIR_COMMON_BASE=/out/$1 && \
  cd $LINEAGE_SRC && \
  . ./build/envsetup.sh && \
  run_make clean
)
}

boot-odin() {
(
  cd /mnt/roms/odin && \
  create-odin lineage-boot-$1 /out/$1/$LINEAGE_WHICH/target/product/$1/boot.img
)
}

gdb-lineage() {
  export OUT_DIR_COMMON_BASE=/out/$1 && \
  . ./build/envsetup.sh && \
  breakfast $1 && \
  gdbclient
}

# -------------------------

alias build-kiwi='build-lineage kiwi'
alias build-kiwi-eng='build-lineage kiwi lineage-eng'
alias build-kiwi-boot='build-lineage-boot-odin kiwi'
alias kiwi-boot-odin='boot-odin kiwi'
alias release-kiwi='release-lineage kiwi'

alias build-victara='build-lineage victara'
alias build-victara-eng='build-lineage victara lineage-eng'
alias build-victara-boot='build-lineage-boot victara'
alias release-victara='release-lineage victara'

alias build-mondrianwifi='build-lineage mondrianwifi'
alias build-mondrianlte='build-lineage mondrianlte'
alias build-mondrianwifi-eng='build-lineage mondrianwifi lineage-eng'
alias build-mondrianlte-eng='build-lineage mondrianlte lineage-eng'
alias build-mondrianwifi-boot='build-lineage-boot-odin mondrianwifi'
alias build-mondrianlte-boot='build-lineage-boot-odin mondrianlte'
alias mondrianwifi-boot-odin='boot-odin mondrianwifi'
alias mondrianlte-boot-odin='boot-odin mondrianlte'
alias release-mondrianlte='release-lineage mondrianlte'

alias build-picassolte='build-lineage picassolte'
alias build-picassolte-eng='build-lineage picassolte lineage-eng'
alias build-picassolte-boot='build-lineage-boot-odin picassolte'
alias picassolte-boot-odin='boot-odin picassolte'
alias release-picassolte='release-lineage picassolte'

alias build-picassowifi='build-lineage picassowifi'
alias build-picassowifi-eng='build-lineage picassowifi lineage-eng'
alias build-picassowifi-boot='build-lineage-boot-odin picassowifi'
alias picassowifi-boot-odin='boot-odin picassowifi'
alias release-picassowifi='release-lineage picassowifi'

alias build-pme='build-lineage pme'
alias release-pme='release-lineage pme'

alias build-ether='build-lineage ether'
alias release-ether='release-lineage ether'

alias build-dlx='build-lineage dlx'
alias build-dlx-eng='build-lineage dlx lineage-eng'
alias build-dlx-boot='build-lineage-boot dlx'
alias release-dlx='release-lineage dlx'

alias build-Z008='build-lineage Z008'
alias build-Z008-eng='build-lineage Z008 lineage-eng'
alias build-Z008-boot='build-lineage-boot Z008'
alias release-Z008='release-lineage Z008'

alias build-Z00A='build-lineage Z00A'
alias build-Z00A-eng='build-lineage Z00A lineage-eng'
alias build-Z00A-boot='build-lineage-boot Z00A'
alias release-Z00A='release-lineage Z00A'

alias gdb-mondrianwifi="gdb-lineage mondrianwifi"

alias mondrianwifi-recovery-odin='( cd /mnt/roms/odin && create-odin lineage-recovery-mondrianwifi /out/mondrianwifi/*/target/product/mondrianwifi/recovery.img )'

alias picassolte-recovery-odin='( cd /mnt/roms/odin && create-odin lineage-recovery-picassolte /out/picassolte/*/target/product/picassolte/recovery.img )'

alias picassowifi-recovery-odin='( cd /mnt/roms/odin && create-odin lineage-recovery-picassowifi /out/picassowifi/*/target/product/picassowifi/recovery.img )'

# -------------------------

lineage-status() {
(
    cd $LINEAGE_SRC
    for f in `repo status | sed "s/^project //p;d" | sed "s/ .*//" | egrep -v '^prebuilts/' | sort`
    do
        (
             cd $f

	     upstream=`repo info . | sed 's/Manifest merge branch: //p;d'`
	     revision=`repo info . | sed 's/Current revision: //p;d'`
	     if echo $revision | egrep -q refs/heads/ ; then
		upstream=`echo $upstream | sed 's@refs/heads/@@'`
	     else
	        upstream=$revision
	     fi

	     changes=`( git status --porcelain ; git log --oneline --no-merges github/$upstream.. ) 2>&1 | wc -l`
	     if [ "$changes" != 0 ]; then
                 echo
                 echo "******* $f: $upstream: $changes updates *****"
                 echo
                 git log --oneline --no-merges github/$upstream..
                 git status --porcelain
	     fi

	     changes=`( git status --porcelain ; git log --oneline --no-merges ..github/$upstream ) 2>&1 | wc -l`
	     if [ "$changes" != 0 ]; then
                 echo
                 echo "******* $f: $upstream: missing $changes updates *****"
                 echo
                 git log --oneline --no-merges ..github/$upstream
                 git status --porcelain
	     fi
        ) 2>&1
   done
) | less
}

# ------------------------

flash-boot() {
    boot=/out/$1/$LINEAGE_WHICH/target/product/$1/boot.img
    if [ ! -r "$boot" ]; then
	echo >&2 "error: Must specify build target and build it.  Failed to access:\n\t$boot"
    else
	dev=dw_mmc.0
        if [ "$2" != "" ]; then
	    dev="$2"
        else
	    dev="/dev/block/platform/dw_mmc.0/by-name/BOOT"
        fi
	echo "Getting the current device state"
	state="`adb get-state`"
	if [ "$state" != recovery ]; then
	    echo "Restarting as root"
	    adb root
	    echo "Waiting for device"
	    adb wait-for-device
	fi
	echo "Pushing $boot"
        adb push $boot /sdcard/boot.img
	echo "Flashing to $dev"
        adb shell dd if=/sdcard/boot.img of=$dev
    fi
}

flash-boot-fastboot() {
    boot=/out/$1/$LINEAGE_WHICH/target/product/$1/boot.img
    fastboot flash boot $boot && fastboot reboot
}

alias flash-boot-mondrianwifi='flash-boot mondrianwifi /dev/block/platform/msm_sdcc.1/by-name/boot'
alias flash-boot-picassolte='flash-boot picassolte /dev/block/platform/msm_sdcc.1/by-name/boot'
alias flash-boot-picassowifi='flash-boot picassowifi'

# ------------------------

flash-recovery() {
   if [ "$3" != "" ]; then
      recovery="$3"
   else
      recovery=/out/$1/*/target/product/$1/recovery.img
   fi
   if [ ! -r $recovery ]; then
	echo >&2 "error: Must specify build target and build it.  Failed to access:\n\t$recovery"
	exit 1
   fi
   if [ "$2" != "" ]; then
	dev="$2"
   else
	dev="/dev/block/platform/dw_mmc.0/by-name/RECOVERY"
   fi
   adb push $recovery /sdcard/recovery.img
   adb shell 'su -c "dd if=/sdcard/recovery.img of=$dev"'
}

alias flash-recovery-mondrianwifi='flash-recovery mondrianwifi /dev/block/platform/msm_sdcc.1/by-name/recovery "$@"'
alias flash-recovery-picassolte='flash-recovery picassolte /dev/block/platform/msm_sdcc.1/by-name/recovery'
alias flash-recovery-picassowifi='flash-recovery picassowifi'

# -----------------------------

audit2allow-lineage()
{
 (
  export OUT_DIR_COMMON_BASE=/out/$1
  export ANDROID_BUILD_TOP=$LINEAGE_SRC
  $LINEAGE_SRC/external/selinux/prebuilts/bin/audit2allow -p $OUT_DIR_COMMON_BASE/$LINEAGE_WHICH/target/product/$1/root/sepolicy
 )
}

alias cat-auditlogs="adb shell 'su -c \"cat /data/misc/audit/*\"'; adb shell dmesg; adb logcat -d"
alias audit2allow-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage $LINEAGE_DEVICE'
alias audit2allow-dlx='audit2allow-lineage dlx'
alias audit2allow-dlx-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage dlx'
alias audit2allow-kiwi='audit2allow-lineage kiwi'
alias audit2allow-kiwi-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage kiwi'
alias audit2allow-mondrianwifi='audit2allow-lineage mondrianwifi'
alias audit2allow-mondrianwifi-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage mondrianwifi'
alias audit2allow-picassolte='audit2allow-lineage picassolte'
alias audit2allow-picassolte-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage picassolte'
alias audit2allow-picassowifi='audit2allow-lineage picassowifi'
alias audit2allow-picassowifi-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage picassowifi'
alias audit2allow-pme='audit2allow-lineage pme'
alias audit2allow-pme-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage pme'
alias audit2allow-ether='audit2allow-lineage ether'
alias audit2allow-ether-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage ether'
alias audit2allow-victara='audit2allow-lineage victara'
alias audit2allow-victara-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage victara'
alias audit2allow-Z008='audit2allow-lineage Z008'
alias audit2allow-Z008-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage Z008'
alias audit2allow-Z00A='audit2allow-lineage Z00A'
alias audit2allow-Z00A-all='(adb shell dmesg ; cat-auditlogs ) | tee /tmp/audit2allow | audit2allow-lineage Z00A'

# -----------------------------

tis-delta() {
    date
    adb shell 'su -c "cat '$1'"' | dos2unix > /tmp/tis
    join -j 1 -t ' ' /tmp/tis.last /tmp/tis | \
	awk '{ if ($3 != $2) printf("%d %d\n", $1, $3 - $2); }'
    cp /tmp/tis /tmp/tis.last
}

alias tis-delta-mali="tis-delta /sys/devices/platform/mali.0/time_in_state"
alias tis-delta-cpu0="tis-delta /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state"
alias tis-delta-cpu1="tis-delta /sys/devices/system/cpu/cpu1/cpufreq/stats/time_in_state"
alias tis-delta-cpu2="tis-delta /sys/devices/system/cpu/cpu2/cpufreq/stats/time_in_state"
alias tis-delta-cpu3="tis-delta /sys/devices/system/cpu/cpu3/cpufreq/stats/time_in_state"

alias restart-adb='adb kill-server && sudo `which adb` start-server'
adb-kill() {
 for who in $@; do
   pids=`adb shell ps | grep "$who" | cut -c 10-15`
   if [ "$pids" = "" ]; then
     echo "Nothing to kill"
   else
     for pid in $pids; do
       echo "Killing pid $pid"
       adb shell 'su -c "kill '$pid'"'
     done
   fi
 done
}

generate-changelog() {
  cd $LINEAGE_SRC/$1
  TAG=nightly-`date +%Y%m%d`
  git tag -d $TAG 2>/dev/null
  git tag $TAG
  git log --oneline --decorate
}

tag-finder() {
    best=9999999999
    tag=""

    for commit in $(git tag -l $1)
    do
        match=$(git diff $commit --shortstat | awk -F' ' '{print $4 + $6}')
        echo $commit has $match lines changed

        if [ $match -lt $best ]; then
            best=$match
            tag=$commit
            echo $tag is the new best match with $best lines changed
        fi
    done

    echo "Best match"
    echo TAG : $tag
    echo Lines Changed : $best
}

alias gc-prima='git cherry-pick --strategy=subtree --strategy-option subtree=drivers/staging/prima'
alias merge-prima='git merge --strategy=subtree --strategy-option subtree=drivers/staging/prima'

gc-prima-series() {
  git log --reverse --oneline --no-merges "$@" | while read commit
  do
    sha1=`echo $commit | cut -d ' ' -f 1`
    if ! gc-prima --allow-empty $sha1
    then
      echo
      echo
      echo $commit
      echo -n "Conflicts, resolve and hit enter: "
      read < /dev/tty
      git commit --allow-empty --reuse-message=$sha1
      git cherry-pick --abort 2>/dev/null
    fi
  done
}

function gdbclient_old_common()
{
   local OUT_ROOT=$OUT
   local OUT_SYMBOLS=$(get_abs_build_var TARGET_OUT_UNSTRIPPED)
   local OUT_SO_SYMBOLS=$(get_abs_build_var TARGET_OUT_SHARED_LIBRARIES_UNSTRIPPED)
   local OUT_VENDOR_SO_SYMBOLS=$(get_abs_build_var TARGET_OUT_VENDOR_SHARED_LIBRARIES_UNSTRIPPED)
   local OUT_EXE_SYMBOLS=$(get_abs_build_var TARGET_OUT_EXECUTABLES_UNSTRIPPED)
   local PREBUILTS=$(get_abs_build_var ANDROID_PREBUILTS)
   local ARCH=$(get_build_var TARGET_ARCH)
   local GDB
   local BITS=$1
   shift

   case "$ARCH" in
       arm) GDB=arm-linux-androideabi-gdb;;
       arm64) GDB=arm-linux-androideabi-gdb; GDB64=aarch64-linux-android-gdb;;
       mips|mips64) GDB=mips64el-linux-android-gdb;;
       x86) GDB=x86_64-linux-android-gdb;;
       x86_64) GDB=x86_64-linux-android-gdb;;
       *) echo "Unknown arch $ARCH"; return 1;;
   esac

   if [ "$OUT_ROOT" -a "$PREBUILTS" ]; then
       local EXE="$1"
       if [ "$EXE" ] ; then
           EXE=$1
       else
           EXE="app_process$BITS"
       fi

       local PORT="$2"
       if [ "$PORT" ] ; then
           PORT=$2
       else
           PORT=":5039"
       fi

       local PID="$3"
       if [ "$PID" ] ; then
           if [[ ! "$PID" =~ ^[0-9]+$ ]] ; then
               PID=`pid $3`
               if [[ ! "$PID" =~ ^[0-9]+$ ]] ; then
                   # that likely didn't work because of returning multiple processes
                   # try again, filtering by root processes (don't contain colon)
                   PID=`adb shell ps | \grep $3 | \grep -v ":" | awk '{print $2}'`
                   if [[ ! "$PID" =~ ^[0-9]+$ ]]
                   then
                       echo "Couldn't resolve '$3' to single PID"
                       return 1
                   else
                       echo ""
                       echo "WARNING: multiple processes matching '$3' observed, using root process"
                       echo ""
                   fi
               fi
           fi
           adb forward "tcp$PORT" "tcp$PORT"
           local USE64BIT="$(is64bit $PID)"
           adb shell gdbserver$USE64BIT $PORT --attach $PID &
           sleep 2
       else
               echo ""
               echo "If you haven't done so already, do this first on the device:"
               echo "    gdbserver $PORT /system/bin/$EXE"
                   echo " or"
               echo "    gdbserver $PORT --attach <PID>"
               echo ""
       fi

       OUT_SO_SYMBOLS=$OUT_SO_SYMBOLS$USE64BIT
       OUT_VENDOR_SO_SYMBOLS=$OUT_VENDOR_SO_SYMBOLS$USE64BIT

       echo >|"$OUT_ROOT/gdbclient.cmds" "set solib-absolute-prefix $OUT_SYMBOLS"
       echo >>"$OUT_ROOT/gdbclient.cmds" "set solib-search-path $OUT_SO_SYMBOLS:$OUT_SO_SYMBOLS/hw:$OUT_SO_SYMBOLS/ssl/engines:$OUT_SO_SYMBOLS/drm:$OUT_SO_SYMBOLS/egl:$OUT_SO_SYMBOLS/soundfx:$OUT_VENDOR_SO_SYMBOLS:$OUT_VENDOR_SO_SYMBOLS/hw:$OUT_VENDOR_SO_SYMBOLS/egl"
       echo >>"$OUT_ROOT/gdbclient.cmds" "source $ANDROID_BUILD_TOP/development/scripts/gdb/dalvik.gdb"
       echo >>"$OUT_ROOT/gdbclient.cmds" "target remote $PORT"
       # Enable special debugging for ART processes.
       if [[ $EXE =~ (^|/)(app_process|dalvikvm)(|32|64)$ ]]; then
          echo >> "$OUT_ROOT/gdbclient.cmds" "art-on"
       fi
       echo >>"$OUT_ROOT/gdbclient.cmds" ""

       local WHICH_GDB=
       # 64-bit exe found
       if [ "$BITS" = "64" ] ; then
           WHICH_GDB=$ANDROID_TOOLCHAIN/$GDB64
       # 32-bit exe / 32-bit platform
       elif [ "$(get_build_var TARGET_2ND_ARCH)" = "" ]; then
           WHICH_GDB=$ANDROID_TOOLCHAIN/$GDB
       # 32-bit exe / 64-bit platform
       else
           WHICH_GDB=$ANDROID_TOOLCHAIN_2ND_ARCH/$GDB
       fi

       $WHICH_GDB -x "$OUT_ROOT/gdbclient.cmds" "$OUT_EXE_SYMBOLS/$EXE"
  else
       echo "Unable to determine build system output dir."
   fi

}

function gdbclient_old()
{
   gdbclient_old_common 32 $*
}

function gdbclient_old64()
{
   gdbclient_old_common 64 $*
}
